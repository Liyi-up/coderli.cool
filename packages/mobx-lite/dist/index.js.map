{"version":3,"file":"index.js","sources":["../../../packages/mobx-lite/src/../src/types.ts","../../../packages/mobx-lite/src/../src/global.ts","../../../packages/mobx-lite/src/../src/core/globalState.ts","../../../packages/mobx-lite/src/../src/core/reaction.ts","../../../packages/mobx-lite/src/../src/api/autorun.ts","../../../packages/mobx-lite/src/../src/utils/checkIfStateModificationsAreAllowed.ts","../../../packages/mobx-lite/src/../src/core/atom.ts","../../../packages/mobx-lite/src/../src/core/observablevalue.ts","../../../packages/mobx-lite/src/../src/core/observableobject.ts","../../../packages/mobx-lite/src/../src/utils/isPlainObject.ts","../../../packages/mobx-lite/src/../src/api/observable.ts"],"sourcesContent":["import Reaction from \"./core/reaction\";\n\nexport interface GlobalState {\n  /** 当前正在追踪的派生 */\n  trackingDerivation: Derivation | null;\n  /** 当前批处理嵌套深度 */\n  inBatch: number;\n  /** 当前运行ID 用于优化依赖追踪 */\n  runId: number;\n  /** 是否正在运行反应队列 */\n  isRunningReactions: boolean;\n  /** 待处理的反应队列 */\n  pendingReactions: Set<Reaction>;\n  /** 是否允许状态修改 */\n  allowStateChanges: boolean;\n}\n\n/**\n * 派生接口，所有派生类型基础接口，例如、(Reaction、ComputedValue)\n */\nexport interface Derivation {\n  /** 派生的当前状态 */\n  dependenciesState: DerivationState;\n  /** 此派生当前依赖的所有可观察对象 */\n  observing: IObservable[];\n  /** 新的依赖集合，用于依赖更新时临时存储 */\n  newObserving: IObservable[] | null;\n  /** 未绑定的依赖计数 */\n  unboundDepsCount: number;\n  /** 派生的运行ID */\n  runId: number;\n  /** 当派生变为过时状态时执行的回调 */\n  onBecomeStale(): void;\n  /** 添加一个可观察对象作为依赖\n   * @param observable 要添加的可观察对象\n   */\n  addDependency(observable: IObservable): void;\n}\n\nexport enum DerivationState {\n  /**\n   * - 含义 ：表示派生（如 autorun、computed 等）当前没有在追踪任何可观察值\n   * - 应用场景 ：\n   *   - 派生刚刚被创建但尚未运行\n   *   - 派生已经被清理/销毁（调用了 dispose 方法）\n   *   - 派生暂时不参与依赖追踪（例如在某些特殊操作期间）\n   * - 特点 ：此状态下派生不会收到任何可观察值变化的通知\n   */\n  NOT_TRACKING = -1,\n  /**\n   * - 含义 ：表示派生当前是最新的，不需要重新计算\n   * - 应用场景 ：\n   *   - 派生刚刚执行过，且它依赖的所有可观察值都没有变化\n   *   - 派生依赖的可观察值发生了变化，但变化的值不影响派生的最终结果\n   * - 特点 ：此状态是性能优化的关键，确保只有真正需要更新的派生才会被重新执行\n   */\n  UP_TO_DATE = 0,\n  /**\n   * - 含义 ：表示派生可能已经过时，但尚未确认\n   * - 应用场景 ：\n   *   - 当某个可观察值发生变化时，它会将所有依赖它的派生标记为 POSSIBLY_STALE\n   *   - 这是一个中间状态，用于延迟确定派生是否真的需要重新计算\n   * - 特点 ：在批处理更新期间很常见，允许 MobX 收集多个变更后再决定哪些派生需要更新\n   */\n  POSSIBLY_STALE = 1,\n  /**\n   * - 含义 ：表示派生肯定已经过时，需要重新计算\n   * - 应用场景 ：\n   *   - 当 MobX 确认派生确实需要更新时（例如在批处理结束时）\n   *   - 当派生依赖的某个已经标记为 STALE 的其他派生时\n   * - 特点 ：处于此状态的派生会被优先调度执行，以确保响应式系统的一致性\n   */\n  STALE = 2,\n}\n\nexport interface IObservable {\n  /** 可观察值的名称，调试使用 */\n  name: string;\n  /** 依赖此可观察对象的派生实例集合 */\n  observers: Set<Derivation>;\n  /** 通知此可观察对象被访问，建立依赖关系 @@returns 是否有观察者依赖此可观察对象 */\n  reportObserved(): boolean;\n  /** 通知可观察对象发生变化，通知所有依赖的观察者 */\n  reportChanged(): void;\n  /** 最后一次访问此可观察对象的派生实例运行ID */\n  lastAccessedBy: number;\n  /** 此可观察对象当前依赖的所有派生实例中，最低的状态 */\n  lowestObserverState: DerivationState;\n}\n\nexport interface IObservableObject<T extends object> {\n  toJS(): T;\n  addObservableProp<K extends string, V>(key: K, value: V): void;\n  deleteProp(key: string | number | symbol): boolean;\n}\n","declare const window: any;\ndeclare const self: any;\n\nconst mockGlobal = {};\n\nexport function getGlobal() {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  // @ts-ignore\n  if (typeof global !== \"undefined\") {\n    // @ts-ignore\n    return global;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  return mockGlobal;\n}\n","import { getGlobal } from \"../global\";\nimport { Derivation, GlobalState } from \"../types\";\n\nimport Reaction from \"./reaction\";\n\nexport const currentObserver = Symbol(\"currentObserver\");\nconst mobxGlobalState = Symbol(\"mobxGlobalState\");\n\nclass MobxGlobalState implements GlobalState {\n  activeReaction: (() => void) | null = null;\n  observers = new WeakMap<object, Map<string | symbol, Set<() => void>>>();\n  pendingReactions = new Set<Reaction>();\n  trackingDerivation: Derivation | null = null;\n  inBatch = 0;\n  runId = 0;\n  isRunningReactions: boolean = false;\n  allowStateChanges: boolean = true;\n}\n\nexport let globalState: MobxGlobalState = (function () {\n  const global = getGlobal();\n  if (!global[mobxGlobalState]) {\n    global[mobxGlobalState] = new MobxGlobalState();\n  }\n  return global[mobxGlobalState];\n})();\n","import { Derivation, DerivationState, IObservable } from \"../types\";\nimport { globalState } from \"./globalState\";\n\n/**\n * Reaction 类 - 响应式副作用，用于实现 autorun 等功能\n */\nclass Reaction implements Derivation {\n  /**调试属性 */\n  public name: string;\n  /** 反应触发时需要执行的函数 */\n  public fn: () => void;\n  /** 反应的当前状态 */\n  public dependenciesState: DerivationState = DerivationState.NOT_TRACKING;\n  /** 反应当前依赖的可观察对象列表 */\n  public observing: IObservable[] = [];\n  /** 新依赖集合，用于更新依赖时的临时存储 */\n  public newObserving: IObservable[] | null = null;\n  /** 未绑定的依赖数量，用于跟踪新依赖的数量 */\n  public unboundDepsCount: number = 0;\n  /** 运行ID，用于标识当前运行的上下文 */\n  public runId: number = 0;\n  /** 是否已被 dispose */\n  public isDisposed: boolean = false;\n\n  constructor(name: string, fn: () => void) {\n    this.name = name;\n    this.fn = fn;\n  }\n\n  /**\n   * 当前反应的状态过时时，将当前反应添加到调度队列\n   * 触发反应的重新运行\n   */\n  public onBecomeStale(): void {\n    this.schedule();\n  }\n\n  /**\n   * 调度反应，\n   * 如果不在批处理上下文中，直接运行，否则加入待处理队列，等待合并处理\n   */\n  public schedule(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    if (globalState.inBatch === 0 && !globalState.isRunningReactions) {\n      this.runReaction();\n    } else {\n      // 批处理中，加入待处理队列\n      globalState.pendingReactions.add(this);\n    }\n  }\n\n  /**\n   * 添加可观察对象作为依赖\n   * @param observable 可观察对象\n   */\n  public addDependency(observable: IObservable): void {\n    // 将可观察对象添加到新的依赖列表中\n    this.newObserving![this.unboundDepsCount++] = observable;\n    // 将当前派生添加为可观察对象的观察者\n    observable.observers.add(this);\n  }\n\n  /**\n   * 运行反应函数，收集依赖，并更新依赖\n   */\n  public runReaction(): void {\n    if (this.isDisposed) return;\n\n    // 重置依赖状态\n    this.dependenciesState = DerivationState.UP_TO_DATE;\n\n    // 准备新的依赖列表\n    this.newObserving = new Array(this.observing.length);\n    this.unboundDepsCount = 0;\n    this.runId = ++globalState.runId;\n\n    // 保存之前的 trackingDerivation，并设置当前派生为 active\n    const previousDerivation = globalState.trackingDerivation;\n    globalState.trackingDerivation = this;\n\n    try {\n      // 执行派生函数，这会触发依赖收集\n      this.fn();\n      // 绑定新的依赖关系并清理旧的\n      this.bindDependencies();\n    } catch (error) {\n      console.error(`Error in reaction \"${this.name}\":`, error);\n    } finally {\n      // 恢复之前的 trackingDerivation\n      globalState.trackingDerivation = previousDerivation;\n    }\n  }\n\n  /**\n   * 绑定新的依赖关系并清理旧的\n   */\n  private bindDependencies(): void {\n    // 处理 newObserving 可能为 null 的情况\n    if (!this.newObserving) return;\n\n    const prevObserving = this.observing;\n    const newObserving = this.newObserving;\n    const newObservingLength = this.unboundDepsCount;\n\n    // 优化：检查新依赖集合是否为空\n    if (newObservingLength === 0) {\n      // 如果新依赖集合为空，清理所有旧依赖\n      for (let i = 0; i < prevObserving.length; i++) {\n        prevObserving[i].observers.delete(this);\n      }\n      this.observing = [];\n      this.newObserving = null;\n      return;\n    }\n\n    // 优化：使用 Set 来跟踪需要保留的依赖\n    const keepObserving = new Set<IObservable>();\n    for (let i = 0; i < newObservingLength; i++) {\n      keepObserving.add(newObserving[i]);\n    }\n\n    // 只清理不再需要的依赖\n    for (let i = 0; i < prevObserving.length; i++) {\n      const obs = prevObserving[i];\n      if (!keepObserving.has(obs)) {\n        obs.observers.delete(this);\n      }\n    }\n\n    // 设置新依赖 - 只保留本次执行过程中实际访问的可观察对象\n    this.observing = newObserving.slice(0, newObservingLength);\n    this.newObserving = null;\n  }\n\n  /**\n   *  销毁，用于清理所有依赖关系\n   */\n  public dispose(): void {\n    if (this.isDisposed) return;\n\n    this.isDisposed = true;\n\n    // 清理所有依赖关系\n    for (let i = 0; i < this.observing.length; i++) {\n      this.observing[i].observers.delete(this);\n    }\n\n    this.observing = [];\n    this.dependenciesState = DerivationState.NOT_TRACKING;\n    // 从待处理列表中移除\n    globalState.pendingReactions.delete(this);\n  }\n}\n\nexport default Reaction;\n","import Reaction from \"../core/reaction\";\n\n/**\n * 创建一个自动运行的反应\n * 当依赖的可观察数据变化时，自动重新执行提供的函数\n * @param fn 要自动运行的函数\n * @returns 清理函数，调用后停止自动运行\n */\nfunction autorun(fn: () => void) {\n  const reaction = new Reaction(\"Autorun\", fn);\n  reaction.runReaction();\n  return function dispose() {\n    reaction.dispose();\n  };\n}\n\nexport default autorun;\n","import { globalState } from \"../core/globalState\";\n\n/**\n * 检查是否允许修改状态\n */\nfunction checkIfStateModificationsAreAllowed(): void {\n    if (!globalState.allowStateChanges) {\n        console.error('State changes are not allowed at this point.');\n    }\n}\n\nexport default checkIfStateModificationsAreAllowed;\n","import { DerivationState, IObservable } from \"../types\";\nimport { Derivation } from \"../types\";\nimport { globalState } from \"./globalState\";\n\nexport const $mobx = Symbol(\"@coderli/mobx-lite\");\n\n/**\n * Atom 类 - 最小可观察单元，提供依赖追踪的核心逻辑\n */\nclass Atom implements IObservable {\n  /** 调试属性 */\n  public name: string;\n  /** 依赖此可观察对象的所有派生实例集合 */\n  public observers = new Set<Derivation>();\n  /** 上次被访问的派生实例的运行ID */\n  public lastAccessedBy: number = 0;\n  /** 此可观察对象当前依赖的所有派生实例中最低的状态 */\n  public lowestObserverState: DerivationState = DerivationState.NOT_TRACKING;\n\n  constructor(name: string = \"Atom\") {\n    this.name = name;\n  }\n  /**\n   * 报告当前可观察对象被某个派生实例访问\n   * @returns 是否有依赖此可观察对象的派生实例\n   */\n  public reportObserved() {\n    const derivation = globalState.trackingDerivation;\n    if (derivation !== null) {\n      // 优化，只有当本次访问的runId与上次不同时才建立以来\n      if (derivation.runId !== this.lastAccessedBy) {\n        this.lastAccessedBy = derivation.runId;\n        // 将当前Atom添加到派生依赖列表\n        derivation.addDependency(this);\n      }\n      return this.observers.size > 0;\n    }\n    return false;\n  }\n\n  /**\n   * 通知所有依赖当前Atom实例的派生发生变化，\n   */\n  public reportChanged(): void {\n    // 通知所有观察者\n    this.observers.forEach((observer) => {\n      if (observer.dependenciesState === DerivationState.UP_TO_DATE) {\n        observer.dependenciesState = DerivationState.STALE;\n        observer.onBecomeStale();\n      }\n      this.lowestObserverState = Math.min(\n        this.lowestObserverState,\n        observer.dependenciesState\n      );\n    });\n  }\n}\n\nexport default Atom;\n","import { Derivation, DerivationState, IObservable } from \"../types\";\nimport Atom from \"./atom\";\n\nclass ObservableValue<T> implements IObservable {\n  /** 内部 Atom 实例，管理依赖追踪 */\n  private atom: Atom;\n  /** 存储实际值 */\n  private _value: T;\n  /** 调试属性 */\n  public name: string;\n  /** 依赖此可观察值的所有派生实例集合 */\n  public observers: Set<Derivation>;\n  /** 上次被访问的派生实例的运行ID */\n  public lastAccessedBy: number;\n  /** 此可观察值当前依赖的所有派生实例中最低的状态 */\n  public lowestObserverState: DerivationState;\n\n  constructor(value: T, name = \"ObservableValue\") {\n    this.name = name;\n    this._value = value;\n    this.atom = new Atom(name);\n    this.observers = this.atom.observers;\n    this.lastAccessedBy = this.atom.lastAccessedBy;\n    this.lowestObserverState = this.atom.lowestObserverState;\n  }\n\n  /**\n   * 获取当前值,并建立依赖关系\n   * @returns 当前值\n   */\n  public get value(): T {\n    this.reportObserved(); // 收集依赖\n    return this._value;\n  }\n\n  /**\n   * 设置新值,并触发依赖更新\n   * @param newValue 新值\n   */\n  public set value(newValue: T) {\n    if (newValue !== this._value) {\n      this._value = newValue;\n      this.reportChanged();\n    }\n  }\n\n  /**\n   * 通知所有依赖当前Atom实例的派生Atom发生变化，\n   * 触发它们的重新计算和更新\n   */\n  public reportChanged(): void {\n    this.atom.reportChanged();\n  }\n\n  /**\n   * 报告当前可观察对象被某个派生实例访问\n   * @returns 是否有依赖此可观察对象的派生实例\n   */\n  public reportObserved(): boolean {\n    return this.atom.reportObserved();\n  }\n}\n\nexport default ObservableValue;\n","import { IObservableObject } from \"../types\";\nimport checkIfStateModificationsAreAllowed from \"../utils/checkIfStateModificationsAreAllowed\";\nimport Atom, { $mobx } from \"./atom\";\nimport ObservableValue from \"./observablevalue\";\n\nclass ObservableObject<T extends object> implements IObservableObject<T> {\n  /** 原始对象 */\n  private _target: T;\n  private atom: Atom;\n  /** 存储每个属性的ObservableValue  */\n  private values: Map<string | number | symbol, ObservableValue<any>> =\n    new Map();\n  constructor(target: T, name = \"ObservableObject\") {\n    this._target = target;\n    this.atom = new Atom(name);\n\n    for (const key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        const value = target[key];\n        this.makePropertyObservable(key, value);\n      }\n    }\n    const proxy = new Proxy(this, {\n      get: (target, prop, receiver) => {\n        if (\n          prop === $mobx ||\n          prop === \"toJS\" ||\n          prop === \"addObservableProp\" ||\n          prop === \"deleteProp\"\n        ) {\n          return Reflect.get(target, prop, receiver);\n        }\n        // 对于其他属性，获取对应的ObservableValue\n        const observableValue = this.values.get(prop);\n        if (observableValue) {\n          return observableValue.value;\n        }\n        // 如果没有ObservableValue,但目标对象存在该属性，则创建\n        const value = Reflect.get(target, prop, receiver);\n        if (prop in this._target) {\n          this.makePropertyObservable(prop, value);\n          return this.values.get(prop)?.value;\n        }\n\n        return value;\n      },\n\n      set: (target, prop, value, receiver) => {\n        if (prop === $mobx) {\n          return Reflect.set(target, prop, value, receiver);\n        }\n        checkIfStateModificationsAreAllowed();\n        // 检查是否已经有对象的ObservableValue\n        const observableValue = this.values.get(prop);\n        if (observableValue) {\n          observableValue.value = value;\n        } else {\n          this.makePropertyObservable(prop, value);\n        }\n\n        return true;\n      },\n      deleteProperty: (target, prop) => {\n        checkIfStateModificationsAreAllowed();\n        if (this.values.has(prop)) {\n          this.values.delete(prop);\n          // 如果目标对象也有该属性，也从目标对象中删除\n          if (prop in this._target) {\n            delete this._target[prop];\n          }\n        }\n        this.atom.reportChanged();\n        return true;\n      },\n    });\n    return proxy;\n  }\n  /**\n   * 获取原始对象的副本\n   * @returns 对象的副本\n   */\n  toJS(): T {\n    const result = {} as T;\n    for (const key in this._target) {\n      if (Object.prototype.hasOwnProperty.call(this._target, key)) {\n        const value = this.values.get(key)?.value;\n        result[key as keyof T] =\n          value !== undefined ? value : this._target[key];\n      }\n    }\n    return result;\n  }\n  /**\n   * 添加新的可观察属性\n   * @param key 属性名\n   * @param value 属性值\n   */\n  addObservableProp<K extends string, V>(key: K, value: V): void {\n    throw new Error(\"Method not implemented.\");\n  }\n  /**\n   * 删除属性\n   * @param key 要删除的属性名\n   * @returns 是否成功删除\n   */\n  deleteProp(key: string | number | symbol): boolean {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  /**\n   * 将单个属性转换为可观察到\n   * @param prop 属性名\n   * @param value 属性值\n   */\n  private makePropertyObservable(prop: string | number | symbol, value: any) {\n    if (typeof value === \"object\" && value !== null) {\n      if (Array.isArray(value)) {\n        // TODO: 数组的响应式处理\n      } else if (\n        typeof value === \"object\" &&\n        !(value instanceof ObservableObject)\n      ) {\n        value = new ObservableObject(value);\n      }\n    }\n    const observableValue = new ObservableValue(\n      value,\n      `${this.atom.name}.${String(prop)}`\n    );\n    this.values.set(prop, observableValue);\n  }\n\n  /**\n   * 报告此对象被访问，建立依赖关系\n   * @returns 是否有观察者依赖此对象\n   */\n  public reportObserved(): boolean {\n    return this.atom.reportObserved();\n  }\n\n  /**\n   * 报告此对象发生变化，通知所有依赖的派生\n   */\n  public reportChanged(): void {\n    this.atom.reportChanged();\n  }\n}\n\nexport default ObservableObject;\n","/**\n * 判断是否为普通对象\n * @param obj 要检查的对象\n * @returns 是否为普通对象\n */\nfunction isPlainObject(obj: any): boolean {\n  return obj !== null && typeof obj === \"object\" && obj.constructor === Object;\n}\nexport default isPlainObject;\n","import ObservableObject from \"../core/observableobject\";\nimport ObservableValue from \"../core/observablevalue\";\nimport isPlainObject from \"../utils/isPlainObject\";\n\nfunction observable<T extends object>(value: T): T;\nfunction observable<T>(value: T): ObservableValue<T>;\nfunction observable<T extends object>(value: T): any {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  if (value !== null && typeof value === \"object\") {\n    if (isPlainObject(value)) {\n      return new ObservableObject(value);\n    }\n    return value;\n  }\n\n  return new ObservableValue(value);\n}\nexport default observable;\n"],"names":[],"mappings":"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"}