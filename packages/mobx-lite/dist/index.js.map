{"version":3,"file":"index.js","sources":["../../../packages/mobx-lite/src/../src/global.ts","../../../packages/mobx-lite/src/../src/core/globalState.ts","../../../packages/mobx-lite/src/../src/api/action.ts","../../../packages/mobx-lite/src/../src/api/autorun.ts","../../../packages/mobx-lite/src/../src/core/dependency.ts","../../../packages/mobx-lite/src/../src/api/observable.ts","../../../packages/mobx-lite/src/../src/utils/toPrimitive.ts","../../../packages/mobx-lite/src/../src/api/computed.ts","../../../packages/mobx-lite/src/../src/api/runInAction.ts"],"sourcesContent":["declare const window: any;\ndeclare const self: any;\n\nconst mockGlobal = {};\n\nexport function getGlobal() {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  // @ts-ignore\n  if (typeof global !== \"undefined\") {\n    // @ts-ignore\n    return global;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  return mockGlobal;\n}\n","import { getGlobal } from \"../global\";\nimport { Observer } from \"./dependency\";\n\nexport const currentObserver = Symbol(\"currentObserver\");\nconst mobxGlobalState = Symbol(\"mobxGlobalState\");\nclass MobxGlobalState {\n  isBatching = false;\n  activeReaction: (() => void) | null = null;\n  observers = new WeakMap<object, Map<string | symbol, Set<Observer>>>();\n  pendingReactions = new Set();\n}\n\nexport let globalState: MobxGlobalState = (function () {\n  const global = getGlobal();\n  if (!global[mobxGlobalState]) {\n    global[mobxGlobalState] = new MobxGlobalState();\n  }\n  return global[mobxGlobalState];\n})();\n","import { globalState } from \"../core/globalState\";\n\n\nfunction action<T extends (...args: any[]) => any>(fn: T): T;\nfunction action<T extends (...args: any[]) => any>(name: string, fn: T): T;\nfunction action<T extends (...args: any[]) => any>(nameOrFn: string | T, fn?: T): T {\n  let name: string | undefined;\n  let actionFn: T;\n\n  // 处理参数重载\n  if (typeof nameOrFn === 'string') {\n    name = nameOrFn;\n    actionFn = fn!;\n  } else {\n    actionFn = nameOrFn;\n    name = 'action';\n  }\n\n  const { isBatching } = globalState;\n  return function (...args: any[]): any {\n    if (isBatching) {\n      return actionFn(...args);\n    }\n    globalState.isBatching = true;\n\n    try {\n      return fn?.(...args);\n    } finally {\n      globalState.isBatching = false;\n      globalState.pendingReactions.forEach((notification: any) => {\n        notification();\n      });\n      globalState.pendingReactions.clear();\n    }\n  } as T;\n}\n\nexport default action;\n\n\n","import { globalState } from \"../core/globalState\";\n\nfunction autorun(effect: () => void) {\n  const run = () => {\n    const prev = globalState.activeReaction;\n    globalState.activeReaction = run;\n    try {\n      effect();\n    } finally {\n      globalState.activeReaction = prev;\n    }\n  };\n  // 初始化执行收集依赖\n  run();\n  \n}\n\nexport default autorun;\n","import { globalState } from \"./globalState\";\n\nexport interface Observer {\n  (): void;\n  dirty?: () => void;\n}\n\nexport function track(target: object, key: string | symbol): void {\n  const { observers, activeReaction } = globalState;\n  if (!activeReaction) {\n    return;\n  }\n\n  let targetObservers = observers.get(target);\n  if (!targetObservers) {\n    targetObservers = new Map();\n    observers.set(target, targetObservers);\n  }\n  let keyObservers = targetObservers.get(key);\n  if (!keyObservers) {\n    keyObservers = new Set();\n    targetObservers.set(key, keyObservers);\n  }\n  // 将当前活跃的观察者添加到依赖集合\n  keyObservers.add(activeReaction);\n}\n\nexport function trigger(target: object, key: string | symbol): void {\n  const { isBatching, observers, pendingReactions } = globalState;\n  const targetObservers = observers.get(target);\n  if (!targetObservers) {\n    return;\n  }\n  const observersSet = targetObservers.get(key);\n  if (observersSet) {\n    if (isBatching) {\n      // 如果在action中，暂时存储需要触发的观察者\n      observersSet.forEach((observer) => {\n        pendingReactions.add(observer);\n      });\n    } else {\n      observersSet.forEach((observer) => observer());\n    }\n  }\n}\n","import { track, trigger } from \"../core/dependency\";\n\nconst observableKey = Symbol.for(\"isObservable\");\n\n\n/**\n * 创建可观察对象\n * @param obj 要创建可观察对象的对象\n * @returns 可观察对象\n */\nexport function observable<T extends object>(target: T): T {\n  if (typeof target !== \"object\" || target == null) {\n    return target;\n  }\n\n  if (isObservable(target)) {\n    return target;\n  }\n\n  if (Array.isArray(target)) {\n    // TODO: 数组的响应式处理\n    return target;\n  }\n\n  if (isMap(target)) {\n    return target;\n  }\n\n  if(isSet(target)){\n    return target\n  }\n\n  return new Proxy(target, {\n    get(target, key, receiver) {\n      const result = Reflect.get(target, key, receiver);\n      // 如果是对象，递归创建可观察对象（懒处理）\n      if (\n        typeof result === \"object\" &&\n        result !== null &&\n        !isObservable(result)\n      ) {\n        return observable(result);\n      }\n\n      track(target, key);\n      return result;\n    },\n\n    set(target, key, value, receiver) {\n      const oldValue = Reflect.get(target, key, receiver);\n      if (oldValue === value) return true;\n      const result = Reflect.set(target, key, value, receiver);\n      trigger(target, key);\n      return result;\n    },\n\n    deleteProperty(target, key) {\n      const hadKey = Reflect.has(target, key);\n      const result = Reflect.deleteProperty(target, key);\n\n      if (hadKey && result) {\n        trigger(target, key);\n      }\n\n      return result;\n    },\n  });\n}\n\n/**\n * 检查一个对象是否是可观察对象\n * @param value 要检查的值\n * @returns 是否是可观察对象\n */\nfunction isObservable(value: any): boolean {\n  return (\n    typeof value === \"object\" && value !== null && value[observableKey] === true\n  );\n}\n\n/**\n * 检查一个对象是否是Map\n * @param value 要检查的值\n * @returns 是否是Map\n */\nfunction isMap(value: any): boolean {\n  return value instanceof Map;\n}\n\nfunction isSet(value: any): boolean {\n  return value instanceof Set;\n}\n\nobservable[observableKey] = true;\n\nexport default observable;\n"," function toPrimitive(value: any) {\n    return value === null ? null : typeof value === \"object\" ? \"\" + value : value\n}\nexport default toPrimitive","import { globalState } from \"../core/globalState\";\nimport { toPrimitive } from \"../utils\";\n\nclass ComputedRef<T> {\n  private readonly computedFn: () => T;\n  private _value: T | undefined;\n  private _dirty = true; // 是否需要重新计算\n  private effect: () => void;\n  // 依赖此属性的所有观察者\n  private dependencies = new Set<() => void>();\n  constructor(computedFn: () => T) {\n    this.computedFn = computedFn;\n    this.effect = () => {\n      this._dirty = true;\n      this.dependencies.forEach((effect) => effect());\n    };\n  }\n\n  [Symbol.toPrimitive]() {\n    return this.valueOf();\n  }\n  \n  valueOf(): T {\n    return toPrimitive(this.value);\n  }\n  /**\n   * 获取计算属\n   */\n  get value(): T | undefined {\n    const { activeReaction } = globalState;\n    // 收集观察者\n    if (activeReaction) {\n      this.dependencies.add(activeReaction);\n    }\n    if (this._dirty) {\n      // 保存当前活跃的副作用\n      const prevEffect = activeReaction;\n      // 将当前的计算属性effect 设为活跃副作用\n      globalState.activeReaction = this.effect;\n      // 执行计算函数\n      this._value = this.computedFn();\n      // 计算完成后，将活跃副作用设为之前的副作用\n      globalState.activeReaction = prevEffect;\n      this._dirty = false;\n    }\n    return this._value;\n  }\n\n  refresh(): void {\n    this._dirty = true;\n    this.value; // 触发重新计算\n  }\n}\n\nfunction computed<T>(computeFn: () => T): ComputedRef<T> {\n  return new ComputedRef(computeFn);\n}\n\nexport default computed;\n","import action from \"./action\";\n\n/**\n * 立即执行一个函数，并将其包装在action中\n * 用于临时的一次性状态修改\n * @param name 动作名称（可选）\n * @param fn 包含状态修改的函数\n * @returns 函数执行结果\n */\nfunction runInAction<T>(name: string, fn: () => T): T;\nfunction runInAction<T>(fn: () => T): T;\nfunction runInAction<T>(nameOrFn: string | (() => T), fn?: () => T): T {\n  let name: string | undefined;\n  let actionFn: () => T;\n\n  // 处理参数重载\n  if (typeof nameOrFn === \"string\") {\n    name = nameOrFn;\n    actionFn = fn!;\n  } else {\n    actionFn = nameOrFn;\n    name = \"runInAction\";\n  }\n\n  // 创建临时action并立即执行\n  const tempAction = action(name, actionFn);\n  return tempAction();\n}\n\nexport default runInAction;\n"],"names":[],"mappings":"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"}